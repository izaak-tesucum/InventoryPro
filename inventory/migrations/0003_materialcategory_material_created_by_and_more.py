# Generated by Django 5.2.7 on 2025-10-16 21:45

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


def seed_categories(apps, schema_editor):
    """Create unique MaterialCategory records from old category strings."""
    Material = apps.get_model('inventory', 'Material')
    Category = apps.get_model('inventory', 'MaterialCategory')

    category_names = (
        Material.objects.exclude(category_str__isnull=True)
        .exclude(category_str__exact="")
        .values_list('category_str', flat=True)
        .distinct()
    )

    created_count = 0
    for name in category_names:
        _, created = Category.objects.get_or_create(
            name=name.strip(),
            defaults={"description": ""}
        )
        if created:
            created_count += 1

    print(f"[seed_categories] Created {created_count} new categories.")


def map_material_categories(apps, schema_editor):
    """Assign Materials to their corresponding Category ForeignKey."""
    Material = apps.get_model('inventory', 'Material')
    Category = apps.get_model('inventory', 'MaterialCategory')

    updated_count = 0
    for material in Material.objects.all():
        category_name = getattr(material, 'category_str', None)
        if not category_name:
            continue
        category_name = category_name.strip()
        try:
            category = Category.objects.get(name=category_name)
            # Assign the integer FK (category_id) instead of the string
            material.category_id = category.id
            material.save(update_fields=["category"])
            updated_count += 1
        except Category.DoesNotExist:
            continue

    print(f"[map_material_categories] Updated {updated_count} materials with Category FK.")


def unseed_categories(apps, schema_editor):
    """Reverse operation: remove only categories that were auto-seeded."""
    Category = apps.get_model('inventory', 'MaterialCategory')
    deleted_count, _ = Category.objects.all().delete()
    print(f"[unseed_categories] Deleted {deleted_count} seeded categories.")

def unmap_categories(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0002_seed_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # 1. Rename old string column temporarily
        migrations.RenameField(
            model_name='material',
            old_name='category',
            new_name='category_str',
        ),

        # 2. Create MaterialCategory table
        migrations.CreateModel(
            name='MaterialCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
            ],
        ),

        # 3. Add new FK field to Material
        migrations.AddField(
            model_name='material',
            name='category',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='materials',
                to='inventory.materialcategory',
            ),
        ),

        # 4. Seed categories from existing strings
        migrations.RunPython(seed_categories, unseed_categories),

        # 5. Map Materials to their new FK
        migrations.RunPython(map_material_categories, unmap_categories),

        # 6. Optionally remove the old string column after migration
        migrations.RemoveField(
            model_name='material',
            name='category_str',
        ),

        # 7. Other unrelated fields (if still needed)
        migrations.AddField(
            model_name='material',
            name='created_by',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name='material',
            name='supplier',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='materials',
                to='inventory.supplier',
            ),
        ),
        migrations.CreateModel(
            name='MaterialAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('STOCK_ADJUST', 'Stock Adjust'), ('RECEIVE_ORDER', 'Receive Order')], max_length=30)),
                ('details', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='inventory.material')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ordered_at', models.DateTimeField(auto_now_add=True)),
                ('received', models.BooleanField(default=False)),
                ('materials', models.ManyToManyField(related_name='purchase_orders', to='inventory.material')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(blank=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_transactions', to='inventory.material')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
